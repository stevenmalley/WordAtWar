import { createSlice } from '@reduxjs/toolkit';



export const gameSlice = createSlice({
  name: 'game',
  initialState: {
    mode: null,
    width: null,
    player1: null,
    player2: null,
    player1score: null,
    player2score: null,
    activePlayer: null,
    player1name: null,
    player2name: null,
    bag: null
  },
  
  reducers: {
    loadGame:(game,action) => action.payload
    // getBoard:(board,action) => action.payload,
    // loadBoard:(board,action) => action.payload,
    // placeTile:(board,action) => {
    //   const { row, col, tile } = action.payload;
    //   board[row][col].letter = tile.letter;
    //   board[row][col].score = tile.score;
    // }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
});


export const selectGame = (state) => state.game;



// export const getBoard = () => {
//   return async (dispatch, getState) => {
//     const response = await fetchBoardData(5);
//     dispatch({type: 'board/getBoard', payload: response});
//   }
// };

export const loadGame = (game) => {
  return (dispatch, getState) => {
    dispatch({type: 'game/loadGame', payload: game});
  }
}

// export const placeTile = (row,col,tile) => {
//   return (dispatch, getState) => {
//     dispatch({type: 'board/placeTile', payload: {row, col, tile}});
//   }
// };