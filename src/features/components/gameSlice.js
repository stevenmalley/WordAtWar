import { createSlice } from '@reduxjs/toolkit';



export const gameSlice = createSlice({
  name: 'game',
  initialState: {
    mode: null, // "feud", "scrabble", "friends", indicating which board is being used
    width: null, // width of the board
    player1: null, // player ID of the first player
    player2: null, // player ID of the second player
    player1score: null,
    player2score: null,
    activePlayer: null, // 1 or 2, indicated whether it is currently the turn of player1 or player2
    player1name: null,
    player2name: null,
    bag: null, // how many tiles are in the bag
    swapping: false, // flag indicating whether the game is in "swapping" mode, allowing the active player to swap their tiles (only possible when bag > 0)
    quizzing: false, // flag indicating whether the game is in "quizzing" mode, where a player must find the correct definitions of the words they just submitted
    placementScore: null, // amount that would be scored by tiles that have been placed on the board but not yet submitted
  },
  
  reducers: {
    loadGame:(game,action) => action.payload,
    setSwapping:(game,action) => {game.swapping = action.payload},
    switchPlayer:(game,action) => {game.activePlayer = action.payload},
    setPlacementScore:(game,action) => {game.placementScore = action.payload}
    // getBoard:(board,action) => action.payload,
    // loadBoard:(board,action) => action.payload,
    // placeTile:(board,action) => {
    //   const { row, col, tile } = action.payload;
    //   board[row][col].letter = tile.letter;
    //   board[row][col].score = tile.score;
    // }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
});


export const selectGame = (state) => state.game;



// export const getBoard = () => {
//   return async (dispatch, getState) => {
//     const response = await fetchBoardData(5);
//     dispatch({type: 'board/getBoard', payload: response});
//   }
// };

export const loadGame = (game) => {
  return (dispatch, getState) => {
    dispatch({type: 'game/loadGame', payload: game});
  }
};

export const setSwapping = (swap) => {
  return (dispatch, getState) => {
    dispatch({type: 'game/setSwapping', payload: swap});
  }
};

export const switchPlayer = (activePlayer) => {
  return (dispatch, getState) => {
    dispatch({type: 'game/switchPlayer', payload: activePlayer});
  }
};

export const setPlacementScore = (placementScore) => {
  return (dispatch, getState) => {
    dispatch({type: 'game/setPlacementScore', payload: placementScore});
  }
};