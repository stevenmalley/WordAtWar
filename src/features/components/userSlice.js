import { createSlice } from '@reduxjs/toolkit';


const fakeLogin = {
  name: "Flibbet",
  playerID: 2, //3834109,
  currentGameID: 24
}




export const userSlice = createSlice({
  name: 'user',
  initialState: fakeLogin,
  //[],
  
  reducers: {
    // getBoard:(board,action) => action.payload,
    // loadBoard:(board,action) => action.payload,
    // placeTile:(board,action) => {
    //   const { row, col, tile } = action.payload;
    //   board[row][col].letter = tile.letter;
    //   board[row][col].score = tile.score;
    // }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
});

export const selectUser = (state) => state.user;


// export const getBoard = () => {
//   return async (dispatch, getState) => {
//     const response = await fetchBoardData(5);
//     dispatch({type: 'board/getBoard', payload: response});
//   }
// };

// export const loadBoard = (board) => {
//   return (dispatch, getState) => {
//     dispatch({type: 'board/loadBoard', payload: board});
//   }
// }

// export const placeTile = (row,col,tile) => {
//   return (dispatch, getState) => {
//     dispatch({type: 'board/placeTile', payload: {row, col, tile}});
//   }
// };